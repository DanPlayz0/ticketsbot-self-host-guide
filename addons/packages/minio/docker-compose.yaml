services:
  minio:
    image: minio/minio:latest
    container_name: ticketsbot-minio
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS}
      MINIO_ROOT_PASSWORD: ${S3_SECRET}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ../../../miniodata:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  minio-setup:
    image: minio/mc:latest
    container_name: ticketsbot-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 ${S3_ACCESS} ${S3_SECRET};
      if mc ls myminio/${S3_ARCHIVE_BUCKET} >/dev/null 2>&1; then
        echo 'The ${S3_ARCHIVE_BUCKET} bucket already exists';
      else
        mc mb myminio/${S3_ARCHIVE_BUCKET};
        mc anonymous set public myminio/${S3_ARCHIVE_BUCKET};
      fi;
      if mc ls myminio/${S3_DATA_IMPORT_BUCKET} >/dev/null 2>&1; then
        echo 'The ${S3_DATA_IMPORT_BUCKET} bucket already exists';
      else
        mc mb myminio/${S3_DATA_IMPORT_BUCKET};
        mc anonymous set public myminio/${S3_DATA_IMPORT_BUCKET};
      fi;
      if mc ls myminio/${S3_TRANSCRIPT_IMPORT_BUCKET} >/dev/null 2>&1; then
        echo 'The ${S3_TRANSCRIPT_IMPORT_BUCKET} bucket already exists';
      else
        mc mb myminio/${S3_TRANSCRIPT_IMPORT_BUCKET};
        mc anonymous set public myminio/${S3_TRANSCRIPT_IMPORT_BUCKET};
      fi;
      "
    networks:
      - app-network
